#include <optional>


✅ 1. 什么是 std::optional<T>？
optional<T> 是 C++17 引入的一个模板类，用来表示“一个可能有值，也可能没有值”的类型。

可以理解成：“值的容器”，可能为空（失败），也可能存着一个合法值（成功）。
🔹用途：
就像 Python 里的 Optional[T]，或者 Java 里的 Optional<T>。
std::optional<int> maybe_val;

maybe_val = 42;
if (maybe_val.has_value()) {
    std::cout << maybe_val.value() << std::endl;
}
.has_value()：判断是否有值
.value()：取出值（前提是你已经确认有值）

✅ 1. std::optional<T> 的真正意义和类比语言中的对比
📌 它的作用：表示“可能没有值”的场景，替代裸指针或魔法值（如 -1, ""）
C++17	std::optional<int>	更安全地返回“有可能失败”的结果
===========================================================================
✅ 实战使用场景：
函数可能失败，但又不想用例外/异常，也不想用裸指针。

std::optional<int> ParseInt(const std::string &s) {
    try {
        return std::stoi(s);
    } catch (...) {
        return std::nullopt;  // 无效值
    }
}

✅ 2. ParseInt 做了什么？
输入：string 字符串
目标：把字符串转成整数
方法：用 std::stoi() 尝试转换
如果成功：返回 optional<int> 里存着转换后的整数
如果失败（比如 "abc" 不能转成整数）：不抛异常给外部，而是返回 std::nullopt
===========================================================================

✅ 3. 为什么不用裸指针？
裸指针：你必须记得检查它是否为 nullptr，且容易出错或引发悬挂指针

optional：更安全，语义明确：“这是一个可能失败的返回值”

===========================================================================
✅ 4. 为什么不用异常？
异常机制虽然强大，但：
写法繁琐
对性能有一定影响
对新手难掌握
optional 是更轻量、清晰、安全的“替代异常方案”
===========================================================================
🧪 调用与判断的逻辑
auto val = ParseInt("123");
if (val.has_value()) {
    std::cout << val.value() << std::endl;
} else {
    std::cout << "parse failed\n";
}
"123" 是合法整数

std::stoi("123") 成功，返回 123
val 是 optional<int>，里面存了 123
val.has_value() 为 true，输出：123

✅ .has_value() 是什么？
它是 C++ 标准库中 std::optional<T> 类型的成员函数。
用来判断一个 optional 变量是否包含有效值。


===========================================================================
✅ 第2问：std::future 和消息队列的底层异步思想区别？






