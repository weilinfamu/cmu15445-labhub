🧠 std::make_unique<TrieNode>() 背后到底做了什么？
虽然你没有显式写出 new，但其实它底层就是用了 new！🌟

✅ 简洁回答：
std::make_unique<T>() 实际等价于 new T()，是在“堆”上创建新对象，而不是栈上。


🔍 深入解释：
🧱 std::make_unique<T>() 是 C++14 引入的语法糖：

它本质是为了简化和安全替代这段代码：

std::unique_ptr<TrieNode>(new(TrieNode()));
➡️ 用 make_unique，就变成了：

std::make_unique<TrieNode>();  // 更简洁、安全，不会忘写 new 或漏 catch
✅ 举个代码验证：

#include <iostream>
#include <memory>

class A {
 public:
  A() { std::cout << "A constructed\n"; }
  ~A() { std::cout << "A destructed\n"; }
};

int main() {
  auto ptr = std::make_unique<A>();  // 堆上 new A()
}
输出：
A constructed
A destructed
🧪 如果你构造栈上对象是这样的：

A a;  // 构造在栈上
那么它不会用 new，也没有智能指针参与。
-----------------------------------------------------------------
这句话里 “漏 catch” 是个简化说法，意思是：

你自己写 new 时，如果构造函数抛异常，会很容易造成内存泄漏，除非你手动 catch。


auto ptr = std::make_unique<TrieNode>();
这时候，对象构造和智能指针绑定是“同时完成的”

如果构造函数抛异常，它不会泄漏内存

因为 make_unique 是原子操作，一行搞定，异常安全性强







