🧠 首先：你看到的这个结构是因为 children 是一个 map
🌳 这个 map 是什么？

std::map<char, std::shared_ptr<const TrieNode>> children;
意思是：

这个变量 children 是一个 “字典（map）”，它会把某个字符（char）映射到某个 TrieNode。

你可以理解为：

children['a'] = TrieNode("a")；
children['b'] = TrieNode("b")；
children['c'] = TrieNode("c")；

std::map<char, shared_ptr<TrieNode>> children;
等于你创建了一个箱子，里面可以放很多键值对（key:char → value:TrieNode
-------------------------------------------------------------------------
children = {
  'a' → TrieNode,
  'b' → TrieNode,
  'c' → TrieNode
}
-----------------------------------------------

✅ 问题：Trie 和 TrieNodeWithValue 是什么关系？怎么连接起来？
📌 简洁回答：
Trie 是“整个字典树”，而 TrieNodeWithValue<T> 是其中“能存值的节点”。

就像这样：

plaintext
Copy
Edit
Trie（整体）
└── TrieNode（普通节点）
     └── TrieNodeWithValue<T>（叶子节点，保存值）


🌳 什么是 Trie（字典树）？
Trie 是一种特别的树结构，它是：

用“字符一步一步”去找值的路径树

每个节点表示字符串中的一个字符，直到找到完整字符串。

📦 举个例子：「abc」→ 42
我们要存这个映射：
"abc" → 42
root_（起点，不存字符）
 │
 └─ 'a' → 第一个字符，进入子节点
      └─ 'b' → 第二个字符，再进子节点
           └─ 'c' → 第三个字符，到达末尾，挂上 value=42

🧠 那这个结构有什么好处？
✅ 可以方便快速查找前缀、节省重复前缀的空间！

例如：
"abc" → 42  
"abd" → 99
就会变成：

root
 └─ 'a'
     └─ 'b'
         ├─ 'c' → value=42
         └─ 'd' → value=99
你看到了吗？a 和 b 两个前缀是共享的！

----------------------------------------------------------
🌳 整体作用：Trie 是整个字典树的外壳（容器）
它把所有节点（TrieNode、TrieNodeWithValue）统一管理起来，并提供：

查找功能（Get）

插入功能（Put）

删除功能（Remove）










