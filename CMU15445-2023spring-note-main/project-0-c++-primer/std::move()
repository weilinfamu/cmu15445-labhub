 std::move() 本身并不移动任何东西！
它的本质：只是一个 类型转换函数，把一个左值强制转换成“右值引用类型”（T &&）。

作用：告诉编译器："我不再用它了，可以放心移动它的资源了！"

 什么是左值和右值？
左值（lvalue）是：有名字、可以被再次访问的变量。

比如：std::string s = "abc";

右值（rvalue）是：一个临时对象、无法引用。

比如："abc"、std::string("abc")
--------------------------------
✅ std::move 的作用

std::string s = "hello";
std::string t = std::move(s);  // std::move(s) 是右值
std::move(s) ≠ 移动，而是告诉编译器：

“这个变量我不打算再用了，你可以调用它的移动构造函数。”
--------------------------------------------------------------------------------------------------------------------------------
真正的“移动资源”动作发生在移动构造函数/移动赋值函数中，比如：


std::string(const std::string &&);  // 移动构造函数
如果该类型实现了移动构造函数（如 std::string），它会把底层堆资源“搬”到新对象，s 的数据指针会被置空。

---------------------------------------------------------------------------------------------------
🚩 什么是右值（rvalue）？
类型	描述
左值（lvalue）	有名字、有地址、可以取地址、能重复使用
右值（rvalue）	临时的值，没有名字，不能重复使用，不能取地址




