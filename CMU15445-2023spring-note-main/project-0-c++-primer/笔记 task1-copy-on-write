1:写时复制(对照os fork mmap)
提到的「写时复制（Copy-on-Write，COW）」和操作系统中的 mmap 或 fork 时的延迟分配机制确实本质概念相同，但实现层面有区别。

✅ 二者相同的地方（核心思想）：
都是：

共享已有资源，直到某一方发生“写入修改”，才复制出独立副本以保证互不影响。

比如：

Trie 的 Insert 时共享旧节点，直到遇到写入（新 key 的字符），再复制路径上的节点。

OS 的 fork() 时，父子进程共享内存页，直到某一方写了该页，才触发 page fault，然后复制那一页。

触发时机	写入共享内存页（写入时 page fault）	插入 Trie 时主动判断是否需要复制路径
底层机制	页表映射 + 写保护位 + page fault	普通 C++/Java 结构体，手动复制
内存粒度	以「页」为单位（通常 4KB）	以「节点」为单位
自动/手动	自动（内核触发 page fault）	手动写代码递归复制

OS 中：两个进程共享内存页，除非你 write()，系统自动复制该页（写保护页触发 page fault）。

Trie 中：两个版本的 trie 共享前缀，除非你 Insert() 一个新词（你手动复制路径上的节点）。


